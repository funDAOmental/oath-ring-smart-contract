/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Randomness, RandomnessInterface } from "../Randomness";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vrfCoordinator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_linkToken",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_keyHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getKeyHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNftCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNftWinCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_identifier",
        type: "bytes32",
      },
    ],
    name: "getOneNft",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "randomNumber",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Randomness.NftStruct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalKeys",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isMintingStart",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "randomness",
        type: "uint256",
      },
    ],
    name: "rawFulfillRandomness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startMintPhase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stopMintPhase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_identifier",
        type: "bytes32",
      },
    ],
    name: "unlockNft",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_totalKey",
        type: "uint256",
      },
    ],
    name: "updateTotalKeys",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405260006002556003805460ff1916905534801561001f57600080fd5b5060405161097f38038061097f83398101604081905261003e916100d9565b6001600160a01b0384811660a052831660805261005a3361006b565b600991909155600a555061011c9050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b03811681146100d457600080fd5b919050565b600080600080608085870312156100ef57600080fd5b6100f8856100bd565b9350610106602086016100bd565b6040860151606090960151949790965092505050565b60805160a05161084161013e60003960006103860152600050506108416000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063b8046b1c11610066578063b8046b1c146101d3578063c4e4798f146101db578063ced72f87146101ee578063f2fde38b146101f657600080fd5b8063715018a6146101955780637302dce71461019d5780638da5cb5b146101a557806394985ddd146101c057600080fd5b80635c3e0da2116100d35780635c3e0da21461012e5780635ff0c75b14610136578063651d7aa514610155578063692f1d121461018d57600080fd5b80631ca6b9ea146100fa578063331bf1251461010f5780634002cc7d14610126575b600080fd5b61010d610108366004610707565b610209565b005b6009545b6040519081526020015b60405180910390f35b61010d610241565b61010d610293565b61014560035460ff1660011490565b604051901515815260200161011d565b610168610163366004610707565b6102c9565b60408051825160ff16815260208084015190820152918101519082015260600161011d565b61011361032c565b61010d61033c565b610113610370565b6001546040516001600160a01b03909116815260200161011d565b61010d6101ce366004610720565b61037b565b600254610113565b61010d6101e9366004610707565b610401565b600a54610113565b61010d610204366004610742565b61048d565b6001546001600160a01b0316331461023c5760405162461bcd60e51b815260040161023390610772565b60405180910390fd5b600255565b6001546001600160a01b0316331461026b5760405162461bcd60e51b815260040161023390610772565b6003805460ff19166001179055610283600460009055565b610291600480546001019055565b565b6001546001600160a01b031633146102bd5760405162461bcd60e51b815260040161023390610772565b6003805460ff19169055565b6102f06040518060600160405280600060ff16815260200160008152602001600081525090565b506000908152600760209081526040918290208251606081018452815460ff168152600182015492810192909252600201549181019190915290565b600061033760085490565b905090565b6001546001600160a01b031633146103665760405162461bcd60e51b815260040161023390610772565b6102916000610521565b600061033760045490565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103f35760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c006044820152606401610233565b6103fd8282610573565b5050565b60008181526006602052604090205460ff16156104465760405162461bcd60e51b81526020600482015260036024820152624b414560e81b6044820152606401610233565b60035460ff166001146104815760405162461bcd60e51b81526020600482015260036024820152624d505360e81b6044820152606401610233565b61048a8161061c565b50565b6001546001600160a01b031633146104b75760405162461bcd60e51b815260040161023390610772565b6001600160a01b03811661051c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610233565b61048a815b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806105816064846107bd565b61058c9060016107d1565b9050600061059960045490565b6002546105a691906107f7565b90508181106105b857600192506105bd565b600292505b600085815260056020908152604080832080548452600683528184208054600160ff1991821681179092559154855260079093529220805490921660ff8616178255818101869055426002830155600880549091019055505050505050565b600081815260056020526040812082905581907f960c3fe88d950ed417a398d6746908458aa42f3d073723fd9675d36015b402a0908061065d6064846107bd565b6106689060016107d1565b9050600061067560045490565b60025461068291906107f7565b90508181106106a2576001925061069d600480546001019055565b6106a7565b600292505b600085815260056020908152604080832080548452600683528184208054600160ff1991821681179092559154855260079093529220805490921660ff861617825581810186905542600283015560088054909101905550505050505050565b60006020828403121561071957600080fd5b5035919050565b6000806040838503121561073357600080fd5b50508035926020909101359150565b60006020828403121561075457600080fd5b81356001600160a01b038116811461076b57600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601260045260246000fd5b6000826107cc576107cc6107a7565b500690565b600082198211156107f257634e487b7160e01b600052601160045260246000fd5b500190565b600082610806576108066107a7565b50049056fea26469706673582212202023adbd6f3e31c1038790d009058769e21c512adbbfd2a266ab103eb758ec4264736f6c634300080b0033";

type RandomnessConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandomnessConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Randomness__factory extends ContractFactory {
  constructor(...args: RandomnessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Randomness";
  }

  deploy(
    _vrfCoordinator: string,
    _linkToken: string,
    _keyHash: BytesLike,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Randomness> {
    return super.deploy(
      _vrfCoordinator,
      _linkToken,
      _keyHash,
      _fee,
      overrides || {}
    ) as Promise<Randomness>;
  }
  getDeployTransaction(
    _vrfCoordinator: string,
    _linkToken: string,
    _keyHash: BytesLike,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _vrfCoordinator,
      _linkToken,
      _keyHash,
      _fee,
      overrides || {}
    );
  }
  attach(address: string): Randomness {
    return super.attach(address) as Randomness;
  }
  connect(signer: Signer): Randomness__factory {
    return super.connect(signer) as Randomness__factory;
  }
  static readonly contractName: "Randomness";
  public readonly contractName: "Randomness";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandomnessInterface {
    return new utils.Interface(_abi) as RandomnessInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Randomness {
    return new Contract(address, _abi, signerOrProvider) as Randomness;
  }
}
