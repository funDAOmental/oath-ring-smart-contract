/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Randomness, RandomnessInterface } from "../Randomness";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vrfCoordinator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_linkToken",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_keyHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getKeyHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLinkBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMintedTickets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNftCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_identifier",
        type: "bytes32",
      },
    ],
    name: "getOneNft",
    outputs: [
      {
        components: [
          {
            internalType: "enum Randomness.STATUS",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "tickets",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "randomNumber",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Randomness.NftStruct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRegisteredUser",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalTickets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWinningPercentage",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isMintingStart",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "randomness",
        type: "uint256",
      },
    ],
    name: "rawFulfillRandomness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_chanceOfWinningPercentage",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_totalTickets",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_totalRegisteredUser",
        type: "uint256",
      },
    ],
    name: "startMintPhase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stopMintPhase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_identifier",
        type: "bytes32",
      },
    ],
    name: "unlockNft",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052620419106002556003805460ff1990811660641790915560006004819055600581905560068190556007805490921690915560085534801561004557600080fd5b50604051610ddf380380610ddf833981016040819052610064916100ff565b6001600160a01b0384811660a052831660805261008033610091565b600d91909155600e55506101429050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b03811681146100fa57600080fd5b919050565b6000806000806080858703121561011557600080fd5b61011e856100e3565b935061012c602086016100e3565b6040860151606090960151949790965092505050565b60805160a051610c6361017c6000396000818161043e01526108b601526000818161023c0152818161055a01526108870152610c636000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063692f1d12116100a257806394985ddd1161007157806394985ddd146101ce578063c4e4798f146101e1578063ced72f87146101f4578063f2fde38b146101fc578063fbff1b8a1461020f57600080fd5b8063692f1d1214610190578063715018a614610198578063858afa93146101a05780638da5cb5b146101b357600080fd5b806350c5f975116100de57806350c5f9751461013f5780635c3e0da2146101475780635ff0c75b14610151578063651d7aa51461017057600080fd5b80630211bd0e1461011057806306e8337f146101275780631796fd911461012f578063331bf12514610137575b600080fd5b6006545b6040519081526020015b60405180910390f35b600454610114565b600554610114565b600d54610114565b610114610224565b61014f6102b4565b005b61016060075460ff1660011490565b604051901515815260200161011e565b61018361017e3660046109fd565b6102f3565b60405161011e9190610a2c565b610114610386565b61014f610391565b61014f6101ae366004610a7c565b6103c7565b6001546040516001600160a01b03909116815260200161011e565b61014f6101dc366004610ab7565b610433565b61014f6101ef3660046109fd565b6104b9565b600e54610114565b61014f61020a366004610ad9565b61063b565b60035460405160ff909116815260200161011e565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561028b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102af9190610b09565b905090565b6001546001600160a01b031633146102e75760405162461bcd60e51b81526004016102de90610b22565b60405180910390fd5b6007805460ff19169055565b6040805160808101825260008082526020820181905291810182905260608101919091526000828152600b6020526040908190208151608081019092528054829060ff16600181111561034857610348610a16565b600181111561035957610359610a16565b81528154610100900460ff1660208201526001820154604082015260029091015460609091015292915050565b60006102af600c5490565b6001546001600160a01b031633146103bb5760405162461bcd60e51b81526004016102de90610b22565b6103c560006106cf565b565b6001546001600160a01b031633146103f15760405162461bcd60e51b81526004016102de90610b22565b60078054600160ff19918216179091556003805490911660ff851617905560048290556005819055600060065560025461042b9042610b57565b600855505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104ab5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c0060448201526064016102de565b6104b58282610721565b5050565b60075460ff166001146104f45760405162461bcd60e51b81526020600482015260036024820152624d505360e81b60448201526064016102de565b60008181526009602052604090205460ff16156105395760405162461bcd60e51b81526020600482015260036024820152624b414560e81b60448201526064016102de565b426008541061060d57600e546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156105a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd9190610b09565b10156106015760405162461bcd60e51b81526020600482015260036024820152624e454360e81b60448201526064016102de565b61060a81610804565b50565b60405162461bcd60e51b81526020600482015260036024820152624d504560e81b60448201526064016102de565b6001546001600160a01b031633146106655760405162461bcd60e51b81526004016102de90610b22565b6001600160a01b0381166106ca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102de565b61060a815b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061072e606483610b7d565b610739906001610b57565b90506000610748600a84610b7d565b610753906001610b57565b60035490915060009061076b9060ff1684111561083f565b905060006107798284610857565b90508060ff1660065461078c9190610b57565b6006556000868152600a60209081526040808320548352600b909152902080548390829060ff1916600183818111156107c7576107c7610a16565b0217905550805460ff83166101000261ff0019909116178155600181018690554260028201556107fb600c80546001019055565b50505050505050565b6000610814600d54600e54610883565b6000838152600960209081526040808320805460ff19166001179055928252600a9052209190915550565b6000811561084f57506001919050565b506000919050565b60008083600181111561086c5761086c610a16565b141561087a5750600061087d565b50805b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016108f3929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161092093929190610b9f565b6020604051808303816000875af115801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190610c0b565b5060008381526020818152604080832054815180840188905280830185905230606082015260808082018390528351808303909101815260a0909101909252815191830191909120868452929091526109bd906001610b57565b6000858152602081815260409182902092909255805180830187905280820184905281518082038301815260609091019091528051910120949350505050565b600060208284031215610a0f57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b8151608082019060028110610a5157634e487b7160e01b600052602160045260246000fd5b8083525060ff6020840151166020830152604083015160408301526060830151606083015292915050565b600080600060608486031215610a9157600080fd5b833560ff81168114610aa257600080fd5b95602085013595506040909401359392505050565b60008060408385031215610aca57600080fd5b50508035926020909101359150565b600060208284031215610aeb57600080fd5b81356001600160a01b0381168114610b0257600080fd5b9392505050565b600060208284031215610b1b57600080fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b7857634e487b7160e01b600052601160045260246000fd5b500190565b600082610b9a57634e487b7160e01b600052601260045260246000fd5b500690565b60018060a01b038416815260006020848184015260606040840152835180606085015260005b81811015610be157858101830151858201608001528201610bc5565b81811115610bf3576000608083870101525b50601f01601f19169290920160800195945050505050565b600060208284031215610c1d57600080fd5b81518015158114610b0257600080fdfea264697066735822122010029f7ba6430067d1a91b1449469386f5af5d08e9c6483e5ce285d4b2fd0ca664736f6c634300080b0033";

type RandomnessConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandomnessConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Randomness__factory extends ContractFactory {
  constructor(...args: RandomnessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Randomness";
  }

  deploy(
    _vrfCoordinator: string,
    _linkToken: string,
    _keyHash: BytesLike,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Randomness> {
    return super.deploy(
      _vrfCoordinator,
      _linkToken,
      _keyHash,
      _fee,
      overrides || {}
    ) as Promise<Randomness>;
  }
  getDeployTransaction(
    _vrfCoordinator: string,
    _linkToken: string,
    _keyHash: BytesLike,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _vrfCoordinator,
      _linkToken,
      _keyHash,
      _fee,
      overrides || {}
    );
  }
  attach(address: string): Randomness {
    return super.attach(address) as Randomness;
  }
  connect(signer: Signer): Randomness__factory {
    return super.connect(signer) as Randomness__factory;
  }
  static readonly contractName: "Randomness";
  public readonly contractName: "Randomness";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandomnessInterface {
    return new utils.Interface(_abi) as RandomnessInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Randomness {
    return new Contract(address, _abi, signerOrProvider) as Randomness;
  }
}
