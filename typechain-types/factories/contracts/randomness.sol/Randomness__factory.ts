/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Randomness,
  RandomnessInterface,
} from "../../../contracts/randomness.sol/Randomness";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vrfCoordinator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_linkToken",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_keyHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getKeyHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLinkBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMintedTickets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNftCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_identifier",
        type: "string",
      },
    ],
    name: "getOneNft",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "epoch",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "tickets",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "randomNumber",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Randomness.NftStruct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_identifier",
        type: "string",
      },
    ],
    name: "getOneTicket",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalTickets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWinningPercentage",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isMintingStart",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "randomness",
        type: "uint256",
      },
    ],
    name: "rawFulfillRandomness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_chanceOfWinningPercentage",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_totalTickets",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "_epoch",
        type: "uint8",
      },
    ],
    name: "startMintPhase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stopMintPhase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_identifier",
        type: "string",
      },
      {
        internalType: "string",
        name: "_epoch",
        type: "string",
      },
    ],
    name: "unlockNft",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c06040526203ac1460025562056ec8600355610fab60045561172e6005556006805460ff1990811660641790915560006007819055600881905560098054909216909155600a5534801561005357600080fd5b506040516200154d3803806200154d8339810160408190526100749161010f565b6001600160a01b0384811660a0528316608052610090336100a1565b600f91909155601055506101529050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b038116811461010a57600080fd5b919050565b6000806000806080858703121561012557600080fd5b61012e856100f3565b935061013c602086016100f3565b6040860151606090960151949790965092505050565b60805160a0516113c06200018d600039600081816107d60152610c33015260008181610359015281816107160152610c0401526113c06000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a257806394985ddd1161007157806394985ddd146101e8578063ced6e06c146101fb578063ced72f871461020e578063f2fde38b14610216578063fbff1b8a1461022957600080fd5b8063715018a614610192578063832747fd1461019a5780638da5cb5b146101ba5780638dcb3731146101d557600080fd5b806350c5f975116100de57806350c5f975146101595780635c3e0da2146101615780635ff0c75b1461016b578063692f1d121461018a57600080fd5b80630211bd0e14610110578063037bee481461012757806306e8337f14610149578063331bf12514610151575b600080fd5b6008545b6040519081526020015b60405180910390f35b61013a610135366004610f52565b61023e565b60405161011e93929190610fe3565b600754610114565b600f54610114565b610114610341565b6101696103d1565b005b61017a60095460ff1660011490565b604051901515815260200161011e565b610114610410565b61016961041b565b6101ad6101a8366004610f52565b610451565b60405161011e919061100b565b6001546040516001600160a01b03909116815260200161011e565b6101696101e3366004611054565b610562565b6101696101f63660046110b8565b6107cb565b6101696102093660046110f0565b61084d565b601054610114565b61016961022436600461112c565b6108cc565b60065460405160ff909116815260200161011e565b6060600080600d846040516102539190611155565b90815260405190819003602001812090600d90610271908790611155565b9081526040519081900360200181206001015460ff1690600d90610296908890611155565b9081526020016040518091039020600201548280546102b490611171565b80601f01602080910402602001604051908101604052809291908181526020018280546102e090611171565b801561032d5780601f106103025761010080835404028352916020019161032d565b820191906000526020600020905b81548152906001019060200180831161031057829003601f168201915b505050505092509250925092509193909250565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156103a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cc91906111ac565b905090565b6001546001600160a01b031633146104045760405162461bcd60e51b81526004016103fb906111c5565b60405180910390fd5b6009805460ff19169055565b60006103cc600e5490565b6001546001600160a01b031633146104455760405162461bcd60e51b81526004016103fb906111c5565b61044f6000610967565b565b61047f604051806080016040528060608152602001600060ff16815260200160008152602001600081525090565b600d8260405161048f9190611155565b90815260200160405180910390206040518060800160405290816000820180546104b890611171565b80601f01602080910402602001604051908101604052809291908181526020018280546104e490611171565b80156105315780601f1061050657610100808354040283529160200191610531565b820191906000526020600020905b81548152906001019060200180831161051457829003601f168201915b5050509183525050600182015460ff1660208201526002820154604082015260039091015460609091015292915050565b60095460ff1660011461059d5760405162461bcd60e51b81526020600482015260036024820152624d505360e81b60448201526064016103fb565b600c826040516105ad9190611155565b9081526040519081900360200190206001015460ff16156105f65760405162461bcd60e51b81526020600482015260036024820152624b414560e81b60448201526064016103fb565b42600a54101561062e5760405162461bcd60e51b81526020600482015260036024820152624d504560e81b60448201526064016103fb565b60405164455030303760d81b602082015260250160405160208183030381529060405280519060200120816040516020016106699190611155565b6040516020818303038152906040528051906020012014156106c45760085460055410156106bf5760405162461bcd60e51b81526020600482015260036024820152624d545560e81b60448201526064016103fb565b6106fe565b60085460045410156106fe5760405162461bcd60e51b81526020600482015260036024820152624d545560e81b60448201526064016103fb565b6010546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078991906111ac565b10156107bd5760405162461bcd60e51b81526020600482015260036024820152624e454360e81b60448201526064016103fb565b6107c782826109b9565b5050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108435760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c0060448201526064016103fb565b6107c78282610a3e565b6001546001600160a01b031633146108775760405162461bcd60e51b81526004016103fb906111c5565b6009805460ff199081166001179091556006805460ff868116919093161790556007838155600060085590821614156108bf576003546108b79042611210565b600a55505050565b6002546108b79042611210565b6001546001600160a01b031633146108f65760405162461bcd60e51b81526004016103fb906111c5565b6001600160a01b03811661095b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103fb565b61096481610967565b50565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006109c9600f54601054610c00565b6000818152600b6020908152604090912085519293506109ed929091860190610d9b565b506000600c84604051610a009190611155565b9081526020016040518091039020905082816000019080519060200190610a28929190610d9b565b506001908101805460ff19169091179055505050565b600042600a54610a4e9190611228565b90506000610a5d603c83611255565b600854600754610a6d9190611228565b610a78906064611269565b610a829190611255565b90506000610a91606485611288565b610a9c906001611210565b90506000610aaa8383610d7b565b60405164455030303760d81b602082015290915060250160408051601f19818403018152828252805160209182012060008a8152600b9092529190209091600c91610af49161129c565b90815260405160209181900382018120610b109290910161129c565b60405160208183030381529060405280519060200120148015610b34575060ff8116155b15610b3d575060015b8060ff16600854610b4e9190611210565b6008556000868152600b60205260408082209051600d91610b6e9161129c565b90815260200160405180910390209050600c600b6000898152602001908152602001600020604051610ba0919061129c565b9081526040519081900360200190208054829190610bbd90611171565b610bc8929190610e1f565b5060018101805460ff841660ff1990911617905560028101869055426003820155610bf7600e80546001019055565b50505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001610c70929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610c9d93929190611338565b6020604051808303816000875af1158015610cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce09190611368565b5060008381526020818152604080832054815180840188905280830185905230606082015260808082018390528351808303909101815260a090910190925281519183019190912086845292909152610d3a906001611210565b60008581526020818152604091829020929092558051808301879052808201849052815180820383018152606090910190915280519101205b949350505050565b60006103e8610d8a8385611269565b610d949190611255565b9392505050565b828054610da790611171565b90600052602060002090601f016020900481019282610dc95760008555610e0f565b82601f10610de257805160ff1916838001178555610e0f565b82800160010185558215610e0f579182015b82811115610e0f578251825591602001919060010190610df4565b50610e1b929150610e9a565b5090565b828054610e2b90611171565b90600052602060002090601f016020900481019282610e4d5760008555610e0f565b82601f10610e5e5780548555610e0f565b82800160010185558215610e0f57600052602060002091601f016020900482015b82811115610e0f578254825591600101919060010190610e7f565b5b80821115610e1b5760008155600101610e9b565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610ed657600080fd5b813567ffffffffffffffff80821115610ef157610ef1610eaf565b604051601f8301601f19908116603f01168101908282118183101715610f1957610f19610eaf565b81604052838152866020858801011115610f3257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610f6457600080fd5b813567ffffffffffffffff811115610f7b57600080fd5b610d7384828501610ec5565b60005b83811015610fa2578181015183820152602001610f8a565b83811115610fb1576000848401525b50505050565b60008151808452610fcf816020860160208601610f87565b601f01601f19169290920160200192915050565b606081526000610ff66060830186610fb7565b60ff9490941660208301525060400152919050565b60208152600082516080602084015261102760a0840182610fb7565b905060ff602085015116604084015260408401516060840152606084015160808401528091505092915050565b6000806040838503121561106757600080fd5b823567ffffffffffffffff8082111561107f57600080fd5b61108b86838701610ec5565b935060208501359150808211156110a157600080fd5b506110ae85828601610ec5565b9150509250929050565b600080604083850312156110cb57600080fd5b50508035926020909101359150565b803560ff811681146110eb57600080fd5b919050565b60008060006060848603121561110557600080fd5b61110e846110da565b925060208401359150611123604085016110da565b90509250925092565b60006020828403121561113e57600080fd5b81356001600160a01b0381168114610d9457600080fd5b60008251611167818460208701610f87565b9190910192915050565b600181811c9082168061118557607f821691505b602082108114156111a657634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156111be57600080fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611223576112236111fa565b500190565b60008282101561123a5761123a6111fa565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826112645761126461123f565b500490565b6000816000190483118215151615611283576112836111fa565b500290565b6000826112975761129761123f565b500690565b600080835481600182811c9150808316806112b857607f831692505b60208084108214156112d857634e487b7160e01b86526022600452602486fd5b8180156112ec57600181146112fd5761132a565b60ff1986168952848901965061132a565b60008a81526020902060005b868110156113225781548b820152908501908301611309565b505084890196505b509498975050505050505050565b60018060a01b038416815282602082015260606040820152600061135f6060830184610fb7565b95945050505050565b60006020828403121561137a57600080fd5b81518015158114610d9457600080fdfea26469706673582212200908bd41919550ee1bff3848963b1c03af1f34a0da129a87d6e600612d49612764736f6c634300080b0033";

type RandomnessConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandomnessConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Randomness__factory extends ContractFactory {
  constructor(...args: RandomnessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _vrfCoordinator: string,
    _linkToken: string,
    _keyHash: BytesLike,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Randomness> {
    return super.deploy(
      _vrfCoordinator,
      _linkToken,
      _keyHash,
      _fee,
      overrides || {}
    ) as Promise<Randomness>;
  }
  override getDeployTransaction(
    _vrfCoordinator: string,
    _linkToken: string,
    _keyHash: BytesLike,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _vrfCoordinator,
      _linkToken,
      _keyHash,
      _fee,
      overrides || {}
    );
  }
  override attach(address: string): Randomness {
    return super.attach(address) as Randomness;
  }
  override connect(signer: Signer): Randomness__factory {
    return super.connect(signer) as Randomness__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandomnessInterface {
    return new utils.Interface(_abi) as RandomnessInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Randomness {
    return new Contract(address, _abi, signerOrProvider) as Randomness;
  }
}
