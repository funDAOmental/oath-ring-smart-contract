/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MintService,
  MintServiceInterface,
} from "../../../../contracts/services/mint.service.sol/MintService";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getMintedKeys",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isMintingStart",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mintPhase",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mintedKeys",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startMinting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stopMinting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_count",
        type: "uint8",
      },
    ],
    name: "updateMintedKeys",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805460ff60a01b1916815560015534801561002057600080fd5b5061002a3361002f565b61007f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104048061008e6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063715018a611610066578063715018a6146101135780638da5cb5b1461011b5780639a65ea2614610136578063ca0f9b311461013e578063f2fde38b1461015157600080fd5b806317881cbf146100a35780632294bf4d146100ce57806330b5abdc146100e05780633e3e0b12146100e95780635ff0c75b146100f3575b600080fd5b6000546100b790600160a01b900460ff1681565b60405160ff90911681526020015b60405180910390f35b6001545b6040519081526020016100c5565b6100d260015481565b6100f1610164565b005b600054600160a01b900460ff1660011460405190151581526020016100c5565b6100f16101a6565b6000546040516001600160a01b0390911681526020016100c5565b6100f16101dc565b6100f161014c366004610320565b61021e565b6100f161015f36600461034a565b610235565b6000546001600160a01b031633146101975760405162461bcd60e51b815260040161018e90610373565b60405180910390fd5b6000805460ff60a01b19169055565b6000546001600160a01b031633146101d05760405162461bcd60e51b815260040161018e90610373565b6101da60006102d0565b565b6000546001600160a01b031633146102065760405162461bcd60e51b815260040161018e90610373565b6000805460ff60a01b1916600160a01b178155600155565b8060ff1660015461022f91906103a8565b60015550565b6000546001600160a01b0316331461025f5760405162461bcd60e51b815260040161018e90610373565b6001600160a01b0381166102c45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161018e565b6102cd816102d0565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561033257600080fd5b813560ff8116811461034357600080fd5b9392505050565b60006020828403121561035c57600080fd5b81356001600160a01b038116811461034357600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156103c957634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212205d968c586515387a57f774f5438ce2c52e6d6878929cc427cb7c819c3f7b19cb64736f6c634300080b0033";

type MintServiceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MintServiceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MintService__factory extends ContractFactory {
  constructor(...args: MintServiceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MintService> {
    return super.deploy(overrides || {}) as Promise<MintService>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MintService {
    return super.attach(address) as MintService;
  }
  override connect(signer: Signer): MintService__factory {
    return super.connect(signer) as MintService__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MintServiceInterface {
    return new utils.Interface(_abi) as MintServiceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MintService {
    return new Contract(address, _abi, signerOrProvider) as MintService;
  }
}
