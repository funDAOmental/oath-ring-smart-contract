/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Randomness {
  export type NftStructStruct = {
    receiver: string;
    status: BigNumberish;
    timestamp: BigNumberish;
  };

  export type NftStructStructOutput = [string, number, BigNumber] & {
    receiver: string;
    status: number;
    timestamp: BigNumber;
  };
}

export interface RandomnessInterface extends utils.Interface {
  contractName: "Randomness";
  functions: {
    "getAllNft(bytes32)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getNftCount()": FunctionFragment;
    "nfts(bytes32)": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "unlockNft()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAllNft",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNftCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nfts", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unlockNft", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getAllNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNftCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockNft", data: BytesLike): Result;

  events: {};
}

export interface Randomness extends BaseContract {
  contractName: "Randomness";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RandomnessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllNft(
      requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[Randomness.NftStructStructOutput]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNftCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    nfts(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        receiver: string;
        status: number;
        timestamp: BigNumber;
      }
    >;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockNft(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAllNft(
    requestId: BytesLike,
    overrides?: CallOverrides
  ): Promise<Randomness.NftStructStructOutput>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getNftCount(overrides?: CallOverrides): Promise<BigNumber>;

  nfts(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber] & {
      receiver: string;
      status: number;
      timestamp: BigNumber;
    }
  >;

  rawFulfillRandomness(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockNft(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllNft(
      requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<Randomness.NftStructStructOutput>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getNftCount(overrides?: CallOverrides): Promise<BigNumber>;

    nfts(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        receiver: string;
        status: number;
        timestamp: BigNumber;
      }
    >;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockNft(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAllNft(
      requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getNftCount(overrides?: CallOverrides): Promise<BigNumber>;

    nfts(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockNft(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllNft(
      requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNftCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nfts(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockNft(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
